variables:
  function_app_name: dependencygraph
stages:
- stage: terraform
  jobs:
  - job: apply
    variables:
    - group: dg-tf-vars
    - group: dg-af-vars
    steps:
    - task: AzureCLI@1
      displayName: run terraform
      inputs:
        azureSubscription: 'pipeline-dg'
        scriptLocation: 'inlineScript'
        inlineScript: |
          terraform init -input=false -backend-config="resource_group_name=$(sa-rg)" -backend-config="storage_account_name=$(sa)" -backend-config="container_name=$(sa-container)"
          terraform plan -out=tfplan -input=false
          terraform apply tfplan
        workingDirectory: 'terraform'
      env:
        TF_VAR_connectionString: $(connectionString)
        TF_VAR_key: $(key)
        TF_VAR_databaseId: $(databaseId)
        TF_VAR_containerId: $(containerId)
        sa-rg: $(sa-rg)
        sa: $(sa)
        sa-container: $(sa-container)
        ARM_CLIENT_ID: $(client-id)
        ARM_CLIENT_SECRET: $(client-secret)
        ARM_SUBSCRIPTION_ID: $(subscription-id)
        ARM_TENANT_ID: $(tenant-id)
        ARM_ACCESS_KEY: $(access-key)
        TF_VAR_function_app_name: "$(function_app_name)"
- stage: Release
  dependsOn: terraform
  jobs:
  - job: Release
    container: mcr.microsoft.com/dotnet/core/sdk:3.0
    steps:
    - task: DotNetCoreCLI@2
      displayName: build
      inputs:
        command: 'build'
        projects: '**/src/*.sln'
    - task: DotNetCoreCLI@2
      displayName: publish
      inputs:
        command: 'publish'
        publishWebProjects: false
        zipAfterPublish: true
        projects: '**/src/*.csproj'
        modifyOutputPath: false
    - task: AzureFunctionApp@1
      displayName: deploy
      inputs:
        azureSubscription: 'pipeline-deploy-dg'
        appType: 'functionAppLinux'
        appName: '$(function_app_name)'
        package: '$(System.DefaultWorkingDirectory)/**/*.zip'
        runtimeStack: 'DOCKER|microsoft/azure-functions-dotnet-core2.0:2.0'