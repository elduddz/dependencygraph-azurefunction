variables:
  function_app_name: dependencygraph
stages:
- stage: terraform
  jobs:
  - job: apply
    variables:
    - group: dg-vars
    steps:
    - task: AzureCLI@1
      displayName: run terraform
      inputs:
        azureSubscription: 'pipeline-dg'
        scriptLocation: 'inlineScript'
        inlineScript: |
          terraform init -input=false -backend-config="resource_group_name=$(sa-rg)" -backend-config="storage_account_name=$(sa)" -backend-config="container_name=$(sa-container)"
          terraform plan -out=tfplan -input=false
          terraform apply tfplan
        workingDirectory: 'terraform'
      env:
        sa-rg: $(sa-rg)
        sa: $(sa)
        sa-container: $(sa-container)
        ARM_CLIENT_ID: $(client-id)
        ARM_CLIENT_SECRET: $(client-secret)
        ARM_SUBSCRIPTION_ID: $(subscription-id)
        ARM_TENANT_ID: $(tenant-id)
        ARM_ACCESS_KEY: $(access-key)
        TF_VAR_function_app_name: "$(function_app_name)"
- stage: Deploy
  jobs:
  - job: restore
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: restore
        workingDirectory: ./src
    - task: DotNetCoreCLI@2
      inputs:
        command: build
        workingDirectory: ./src
    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        publishWebProjects: true
        zipAfterPublish: true
    - task: AzureFunctionApp@1
      inputs:
        appType: functionAppLinux
        appName: "$(function_app_name)"
        azureSubscription: pipeline-deploy-dg