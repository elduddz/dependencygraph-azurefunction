variables:
  function_app_name: dependencygraph
stages:
- stage: terraform
  jobs:
  - job: apply
    variables:
    - group: dg-vars
    steps:
    - task: AzureCLI@1
      displayName: run terraform
      inputs:
        azureSubscription: 'pipeline-dg'
        scriptLocation: 'inlineScript'
        inlineScript: |
          terraform init -input=false -backend-config="resource_group_name=$(sa-rg)" -backend-config="storage_account_name=$(sa)" -backend-config="container_name=$(sa-container)"
          terraform plan -out=tfplan -input=false
          terraform apply tfplan
        workingDirectory: 'terraform'
      env:
        sa-rg: $(sa-rg)
        sa: $(sa)
        sa-container: $(sa-container)
        ARM_CLIENT_ID: $(client-id)
        ARM_CLIENT_SECRET: $(client-secret)
        ARM_SUBSCRIPTION_ID: $(subscription-id)
        ARM_TENANT_ID: $(tenant-id)
        ARM_ACCESS_KEY: $(access-key)
        TF_VAR_function_app_name: "$(function_app_name)"
- stage: Build
  jobs:
  - job: restore
    steps:
    - task: DotNetCoreCLI@2
      displayName: restore packages
      inputs:
        command: 'restore'
        projects: 'src/**.sln'
        feedsToUse: 'select'
        noCache: true
    - task: DotNetCoreCLI@2
      displayName: build app
      inputs:
        command: 'build'
        projects: 'src/*.sln'
        workingDirectory: 'src'
        arguments: --output functionapp
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: 'src/functionapp/'
        includeRootFolder: false
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment:
    environment: PRD 
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - task: AzureFunctionApp@1
            displayName: deploy function app
            inputs:
              azureSubscription: 'pipeline-deploy-dg'
              appType: 'functionAppLinux'
              appName: '$(function_app_name)'
              package: '$(Agent.BuildDirectory)/drop/*.zip'